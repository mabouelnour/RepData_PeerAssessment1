croctime <- function(x) 5 * sqrt(36 + x^2) + 4 * (20 - x)
g <- function(x) {}
body(g) <- D(body(croctime), 'x')
body(g)
g(seq(7, 10, length.out = 10))
pllot(g,x)
plot(g,x)
tt<-seq(7, 10, length.out = 10)
plot(g,tt)
tt
plot(tt,g)
g
gg<-g(seq(7, 10, length.out = 10))
gg
plot(gg,tt)
tt
plot(tt,gg)
which.min(val(gg))
?abs
which.min(abs(gg))
gg[4]
?rnorm
?normal_auc
normal <- function(x, mu = 0, sigma = 1) {
# x: values on x-axis
# mu: mean value
# sigma: standard deviation
# output
1 / (sigma * sqrt(2*pi)) * exp(-0.5 * ((x - mu)/ sigma)^2)
}
normal_auc <- function(x0, x1, mu = 0, sigma = 1, n = 50) {
stopifnot(n > 0)
if (x0 > x1) {
stop("x0 must be lower than x1")
}
xs <- c(
rep(x0, n),
seq(x0, x1, length.out = n),
rep(x1, n),
rep(x1, x0, length.out = n)
)
ys <- c(
seq(0, normal(x0, mu = mu, sigma = sigma), length.out = n),
normal(seq(x0, x1, length.out = n), mu = mu, sigma = sigma),
seq(0, normal(x1, mu = mu, sigma = sigma), length.out = n),
rep(0, n)
)
list(xs = xs, ys = ys)
}
x <- seq(-3, 3, length.out = 500)
y <- normal(x, mu = 0)
auc <- normal_auc(1, 3, mu = 0)
op = par(mar = c(2.5,1,1,1))
plot(x, y, type = 'n', col = 'gray50', lwd = 4,
axes = FALSE, xlab = '', ylab = '')
axis(side = 1, at = seq(-3, 3, 1), line = -0.3)
polygon(auc$xs, auc$ys, col = 'orange', border = NA)
lines(x, y, col = 'gray50', lwd = 3)
plot(x, y, type = 'n', col = 'gray50', lwd = 4,
+      axes = FALSE, xlab = '', ylab = '')
plot(x, y, type = 'n', col = 'gray50', lwd = 4, axes = FALSE, xlab = '', ylab = '')
polygon(auc$xs, auc$ys, col = 'orange', border = NA)
lines(x, y, col = 'gray50', lwd = 3)
axis(side = 1, at = seq(-3, 3, 1), line = -0.3)
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day<-today()
ths_day
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hour=16, minute=9)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
now()
now("America/New_York")
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17, minutes=34, seconds=0 )
depart<-update(depart,hours=17, minutes=34)
depart
arrive<-depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive, tzone="Asia/Hong_Kong")
print arrive
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long(last_time, arrive)
how_long<-(last_time, arrive)
how_long<-interval(last_time, arrive)
as.period(how_long)
stopwatch()
packages <- c("data.table", "quantmod")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
varNamesSplit
?strsplit
varNames
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215, stringsAsFactors = FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
## Warning: NAs introduced by coercion
mean(gdp, na.rm = TRUE)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isJune <- grepl("june", tolower(dt$Special.Notes))
table(isFiscalYearEnd, isJune)
##                isJune
## isFiscalYearEnd FALSE TRUE
##           FALSE   203    3
##           TRUE     19   13
dt[isFiscalYearEnd & isJune, Special.Notes]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
library(lubridate)
sampleTimes<-ymd(sampleTimes)
sampleTimes
class(sampleTimes)
summary(sampleTimes)
sampleyears<-years(sampleTimes)
sampleyears
table(year(sampleTimes), weekdays(sampleTimes))
?addmargins
amzn
names(amzn)
amzn2012<-subset(amzn, year(amzn$AMZN.Open)==2012)
dim(amzn)
dim(amzn2012)
plot(year(amzn$AMZN.Open), amzn$AMZN.High)
boxplot(year(amzn$AMZN.Open), amzn$AMZN.High)
?boxplot
boxplot(year(amzn$AMZN.Open), amzn$AMZN.High, data=amzn)
tradeyears<-year(amzn$AMZN.Open)
tradeyears
amzn$AMZN.Open<-year(amzn$AMZN.Open)
str(amzn)
names(amzn)
with(amzn, boxplot(AMZN.High,AMZN.Open))
with(amzn, boxplot(AMZN.High ~ AMZN.Open))
with(amzn, boxplot(amzn$AMZN.High ~ amzn$AMZN.Open))
boxplot(amzn$AMZN.High ~ amzn$AMZN.Open, data=amzn)
?boxplot
class(amzn$AMZN.Open)
amzn$AMZN.Open
amznyears<-year(amzn$AMZN.Open)
amznyears
str(amznyears)
amznhighs<-amzn$AMZN.High
amznhighs
amznhighs<-as.numeric(amzn$AMZN.High)
amznhighs
amznyears
amznme<-cbind(amznyears,amznhighs)
stramznme
str(amznme)
amznyears<-as.numeric(amznyears)
amznme$amznyears<-as.numeric(amznyears)
str(amznme)
getwd()
list.files()
library(reshape2)
filename <- "getdata_dataset.zip"
## Download and unzip the dataset:
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip "
download.file(fileURL, filename, method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
# Load activity labels + features
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt")
activityLabels[,2] <- as.character(activityLabels[,2])
features <- read.table("UCI HAR Dataset/features.txt")
features[,2] <- as.character(features[,2])
# Extract only the data on mean and standard deviation
featuresWanted <- grep(".*mean.*|.*std.*", features[,2])
featuresWanted.names <- features[featuresWanted,2]
featuresWanted.names = gsub('-mean', 'Mean', featuresWanted.names)
featuresWanted.names = gsub('-std', 'Std', featuresWanted.names)
featuresWanted.names <- gsub('[-()]', '', featuresWanted.names)
# Load the datasets
train <- read.table("UCI HAR Dataset/train/X_train.txt")[featuresWanted]
trainActivities <- read.table("UCI HAR Dataset/train/Y_train.txt")
trainSubjects <- read.table("UCI HAR Dataset/train/subject_train.txt")
train <- cbind(trainSubjects, trainActivities, train)
test <- read.table("UCI HAR Dataset/test/X_test.txt")[featuresWanted]
testActivities <- read.table("UCI HAR Dataset/test/Y_test.txt")
testSubjects <- read.table("UCI HAR Dataset/test/subject_test.txt")
test <- cbind(testSubjects, testActivities, test)
# merge datasets and add labels
allData <- rbind(train, test)
colnames(allData) <- c("subject", "activity", featuresWanted.names)
# turn activities & subjects into factors
allData$activity <- factor(allData$activity, levels = activityLabels[,1], labels = activityLabels[,2])
allData$subject <- as.factor(allData$subject)
allData.melted <- melt(allData, id = c("subject", "activity"))
allData.mean <- dcast(allData.melted, subject + activity ~ variable, mean)
write.table(allData.mean, "tidy.txt", row.names = FALSE, quote = FALSE)
activityLabels
features
featuresWanted
featuresWanted.names
mtcars
level(mtcars$cyl)
?levels
levels(mtcars$cyl)
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
class(mtcars$cyl)
plot(weight ~ group, data = PlantGrowth)
plot(weight ~ group, data = PlantGrowth, pch=16)
plot(weight,group, data = PlantGrowth, pch=16)
with(plantGrowth, plot(weight,group, pch=16) )
?with
with(plantGrowth, {plot(weight,group, pch=16} )
with(plantGrowth, {plot(weight,group, pch=16)} )
PlantGrowth
with(plantGrowth, {plot(weight,group)} )
with(PlantGrowth, {plot(group,weight)})
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
strsplit(cnames,"|",fixed=TRUE)
cnames<-strsplit(cnames,"|",fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
wcol
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x0 <- pm1$Sample.Value
x0 <- pm0$Sample.Value
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(xo,x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative<-x1<0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates<-pm1$Date
str(dates)
dates<-a.Date(as.character(dates), "%Y%m%d")
dates<-as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
dev.off()
hist(dates[negative], "month")
dates
str(site0)
both<-intersect(site0,site1)
both
head(pm0)
cnt0<-subset(pm0, (state.Code==36) & (county.site %in% both))
cnt0<-subset(pm0, (State.Code==36) & (county.site %in% both))
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm9sub<-subset(cnt0, County.Code==63 & Site.ID==2008)
pm0sub<-subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub<-subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
pllot(dates0,x0sub, pch=20)
plot(dates0,x0sub, pch=20)
abline(h=median(x0sub),lwd=2,na,rm=TRUE)
abline(h=median(x0sub),lwd=2,na.rm=TRUE)
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1,x1sub, pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng<-range(x0sub,x1sub. na.rm=TRUE)
rng<-range(x0sub,x1sub, na.rm=TRUE)
rng
mno<-with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
mn0<-with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1<-with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(State=names(mn0), mean=mn0)
d0<-data.frame(state=names(mn0), mean=mn0)
d1<-data.frame(state=names(mn1), mean=mn1)
mrg<-merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y,]
library*swirl)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
1.6*.8/2
.64
?mypdf
mypdf
mypdf(1.6)
integrate(mypdf, 0,1.6)
sqrt(2)
library(swirl)
swirl
swirl()
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
1/6
x/6
1
info()
1/6
1:6
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
3.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
fi <- temp["X",]
xi <- temp["Prob",]
product <- fi*xi
ans <- sum(product)
ans
library(swirl)
swirl()
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-sqr(3.5)
ex2_fair-3.5^2
sum(dice_fair * dice_high) - (edh)^2
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean)
)
libray(swirl())
library(swirl)
swirl()
coilpolot(10)
coinplot(10)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
p'+c(1,-1)* qnorm(.975)*sqrt(p'(1-p')/100)
.6+c(1,-1)* qnorm(.975)*sqrt(.6*.4/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
library("knitr", lib.loc="~/R/win-library/3.2")
detach("package:knitr", unload=TRUE)
library(knitr)
installed.packages(rmarkdown)
ver()
library("knitr", lib.loc="~/R/win-library/3.2")
install.packages("rmarkdown")
library(datasets);data(ChickWeight);library(reshape2)
wideCw<-dcast(ChickWeight, Diet+Chick ~ Time, value.var="weight")
head(ChickWeight)
head(ChickWeight,10)
head(wideCw)
tail(wideCw)
names(wideCw)
?dcast
chick_m <- melt(ChickWeight, id=2:4, na.rm=TRUE)
head(chick_m)
head(ChickWeight)
dcast(chick_m, time ~ variable, mean) # average effect of time
qq<-dcast(chick_m, time ~ variable, mean)
dcast(chick_m, time ~ variable, mean)
dcast(chick_m, diet ~ variable, mean)
acast(chick_m, time ~ diet, length)
chick_m
dcast(chick_m, diet ~ variable, mean)
dcast(chick_m, Diet ~ variable, mean)
dcast(chick_m, Time ~ variable, mean)
acast(chick_m, Diet ~ Time, mean)
library(swirl)
swir()
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference<-g2-g1
mean(difference)
s<-sd(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
swirl()
1
2
2/2.5
17
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
6
8
pt(2.5,15,lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6,size=8,p=.5,lower.tail = FALSE)
pbinom(7,size=8,p=.5,lower.tail = TRUE)
pbinom(9,size=5,p=.5,lower.tail = FALSE)
ppois(9,5,lower.tail=FALSE)
setwd("C:/Users/Mohamed/Desktop/RepResearch")
